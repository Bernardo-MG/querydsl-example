<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

   <modelVersion>4.0.0</modelVersion>

   <!-- ********************************************** -->
   <!-- ****************** BASE POM ****************** -->
   <!-- ********************************************** -->

   <parent>
      <groupId>com.bernardomg.example</groupId>
      <artifactId>querydsl-example</artifactId>
      <version>1.2.0-SNAPSHOT</version>
   </parent>

   <!-- ********************************************** -->
   <!-- **************** PROJECT INFO **************** -->
   <!-- ********************************************** -->

   <artifactId>sql</artifactId>
   <packaging>jar</packaging>

   <name>Querydsl Example - SQL</name>
   <description>An example showing how to use Querydsl</description>

   <!-- ********************************************** -->
   <!-- ****************** PROFILES ****************** -->
   <!-- ********************************************** -->

   <profiles>
      <!-- ============================================== -->
      <!-- ============= DATABASE PROFILES ============== -->
      <!-- ============================================== -->
      <profile>
         <!-- Default database profile -->
         <!-- Required when the tests are disabled -->
         <id>default</id>
         <properties>
            <!-- Access data -->
            <database.url>jdbc:h2:mem:testdb</database.url>
            <database.username>sa</database.username>
            <database.password></database.password>
            <!-- Spring context -->
            <spring.profile.database>h2</spring.profile.database>
         </properties>
         <dependencies>
            <dependency>
               <!-- H2 database -->
               <groupId>com.h2database</groupId>
               <artifactId>h2</artifactId>
               <version>${h2.version}</version>
               <scope>test</scope>
            </dependency>
         </dependencies>
      </profile>
      <profile>
         <!-- H2 database profile -->
         <!-- Prepares the project to make use of an H2 in-memory database -->
         <id>h2</id>
         <properties>
            <!-- Access data -->
            <database.url>jdbc:h2:mem:testdb</database.url>
            <database.username>sa</database.username>
            <database.password></database.password>
            <!-- Spring context -->
            <spring.profile.database>h2</spring.profile.database>
         </properties>
         <dependencies>
            <dependency>
               <!-- H2 database -->
               <groupId>com.h2database</groupId>
               <artifactId>h2</artifactId>
               <version>${h2.version}</version>
               <scope>test</scope>
            </dependency>
         </dependencies>
      </profile>
      <profile>
         <!-- HSQLDB database profile -->
         <!-- Prepares the project to make use of an HSQLDB in-memory database -->
         <id>hsqldb</id>
         <properties>
            <!-- Access data -->
            <database.url>jdbc:hsqldb:mem:testdb</database.url>
            <database.username>sa</database.username>
            <database.password></database.password>
            <!-- Spring context -->
            <spring.profile.database>hsqldb</spring.profile.database>
         </properties>
         <dependencies>
            <dependency>
               <!-- HSQLDB driver -->
               <groupId>org.hsqldb</groupId>
               <artifactId>hsqldb</artifactId>
               <version>${hsqldb.version}</version>
               <scope>test</scope>
            </dependency>
         </dependencies>
      </profile>
      <profile>
         <!-- MySQL database profile -->
         <!-- Prepares the project to make use of an H2 in-memory database -->
         <id>mysql</id>
         <properties>
            <!-- Access data -->
            <database.url>jdbc:mysql://localhost:3306/testdb</database.url>
            <database.username>root</database.username>
            <database.password>root</database.password>
            <!-- Spring context -->
            <spring.profile.database>mysql</spring.profile.database>
         </properties>
         <dependencies>
            <dependency>
               <!-- MySQL connector -->
               <groupId>mysql</groupId>
               <artifactId>mysql-connector-java</artifactId>
               <version>${mysql.version}</version>
               <scope>test</scope>
            </dependency>
         </dependencies>
      </profile>
      <profile>
         <!-- Postgres database profile -->
         <!-- Prepares the project to make use of a Postgres database -->
         <id>postgres</id>
         <properties>
            <!-- Access data -->
            <database.url>jdbc:postgresql://localhost:5432/testdb</database.url>
            <database.username>postgres</database.username>
            <database.password>postgres</database.password>
            <!-- Spring context -->
            <spring.profile.database>postgres</spring.profile.database>
         </properties>
         <dependencies>
            <dependency>
               <!-- Postgres connector -->
               <groupId>org.postgresql</groupId>
               <artifactId>postgresql</artifactId>
               <version>${postgresql.version}</version>
               <scope>test</scope>
            </dependency>
         </dependencies>
      </profile>
   </profiles>

   <!-- ********************************************** -->
   <!-- **************** PROPERTIES ****************** -->
   <!-- ********************************************** -->

   <properties>
      <!-- ============================================== -->
      <!-- =============== MANIFEST DATA ================ -->
      <!-- ============================================== -->
      <manifest.name>com/bernardomg/example/querydsl/sql</manifest.name>
      <!-- ============================================== -->
      <!-- ============== CODE GENERATION =============== -->
      <!-- ============================================== -->
      <codegen.skip>true</codegen.skip>
      <codegen.url><![CDATA[jdbc:mysql://localhost:3306/testdb?user=test&password=test&nullNamePatternMatchesAll=true]]></codegen.url>
      <!-- ============================================== -->
      <!-- =========== DEPENDENCIES VERSIONS ============ -->
      <!-- ============================================== -->
      <h2.version>1.4.200</h2.version>
      <hikari.version>3.4.5</hikari.version>
      <hsqldb.version>2.6.0</hsqldb.version>
      <javaee.api.version>2.2</javaee.api.version>
      <jaxb.version>2.3.1</jaxb.version>
      <liquibase.version>4.4.3</liquibase.version>
      <log4j.version>2.14.1</log4j.version>
      <mongo.embedded.version>3.0.0</mongo.embedded.version>
      <mysql.version>8.0.21</mysql.version>
      <postgresql.version>42.2.24</postgresql.version>
      <slf4j.version>2.0.0-alpha5</slf4j.version>
      <snakeyaml.version>1.29</snakeyaml.version>
      <!-- ============================================== -->
      <!-- ============== PLUGINS VERSIONS ============== -->
      <!-- ============================================== -->
      <plugin.processor.version>4.5</plugin.processor.version>
      <!-- ============================================== -->
      <!-- ================= MAVEN SITE ================= -->
      <!-- ============================================== -->
      <site.skin.version>2.2.4</site.skin.version>
   </properties>

   <!-- ********************************************** -->
   <!-- *************** DEPENDENCIES ***************** -->
   <!-- ********************************************** -->

   <dependencies>
      <!-- ============================================== -->
      <!-- ================== QUERYDSL ================== -->
      <!-- ============================================== -->
      <dependency>
         <!-- Querydsl Core -->
         <groupId>com.querydsl</groupId>
         <artifactId>querydsl-core</artifactId>
      </dependency>
      <dependency>
         <!-- Querydsl SQL -->
         <groupId>com.querydsl</groupId>
         <artifactId>querydsl-sql</artifactId>
      </dependency>
      <!-- ============================================== -->
      <!-- ======= TEST ENVIRONMENT DEPENDENCIES ======== -->
      <!-- ============================================== -->
      <dependency>
         <!-- Hikari CP -->
         <groupId>com.zaxxer</groupId>
         <artifactId>HikariCP</artifactId>
         <version>${hikari.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Liquibase -->
         <groupId>org.liquibase</groupId>
         <artifactId>liquibase-core</artifactId>
         <version>${liquibase.version}</version>
         <exclusions>
            <exclusion>
               <groupId>ch.qos.logback</groupId>
               <artifactId>logback-classic</artifactId>
            </exclusion>
         </exclusions>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- SnakeYAML -->
         <groupId>org.yaml</groupId>
         <artifactId>snakeyaml</artifactId>
         <version>${snakeyaml.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- JUnit Jupiter Engine -->
         <groupId>org.junit.jupiter</groupId>
         <artifactId>junit-jupiter-engine</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- JUnit Jupiter Platform -->
         <groupId>org.junit.platform</groupId>
         <artifactId>junit-platform-runner</artifactId>
         <scope>test</scope>
         <exclusions>
            <exclusion>
               <!-- JUnit 3 -->
               <groupId>junit</groupId>
               <artifactId>junit</artifactId>
            </exclusion>
         </exclusions>
      </dependency>
      <dependency>
         <!-- Spring AOP -->
         <groupId>org.springframework</groupId>
         <artifactId>spring-aop</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Spring Beans -->
         <groupId>org.springframework</groupId>
         <artifactId>spring-beans</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Spring Framework Context -->
         <groupId>org.springframework</groupId>
         <artifactId>spring-context</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Spring Test -->
         <groupId>org.springframework</groupId>
         <artifactId>spring-test</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Spring Transactions -->
         <groupId>org.springframework</groupId>
         <artifactId>spring-tx</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Spring JDBC -->
         <groupId>org.springframework</groupId>
         <artifactId>spring-jdbc</artifactId>
         <scope>test</scope>
      </dependency>
      <!-- ********************************************** -->
      <!-- ****************** QUERYDSL ****************** -->
      <!-- ********************************************** -->
      <dependency>
         <!-- Querydsl Spring -->
         <groupId>com.querydsl</groupId>
         <artifactId>querydsl-sql-spring</artifactId>
         <scope>test</scope>
      </dependency>
      <!-- ********************************************** -->
      <!-- ****************** LOGGERS ******************* -->
      <!-- ********************************************** -->
      <dependency>
         <!-- SLF4J API -->
         <groupId>org.slf4j</groupId>
         <artifactId>slf4j-api</artifactId>
         <version>${slf4j.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Log4j SLF4J Bridge -->
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-slf4j-impl</artifactId>
         <version>${log4j.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <!-- Log4j core -->
         <groupId>org.apache.logging.log4j</groupId>
         <artifactId>log4j-core</artifactId>
         <version>${log4j.version}</version>
         <scope>test</scope>
      </dependency>
      <!-- ********************************************** -->
      <!-- ************ VERSION ENFORCEMENT ************* -->
      <!-- ********************************************** -->
      <dependency>
         <!-- JAXB API -->
         <groupId>javax.xml.bind</groupId>
         <artifactId>jaxb-api</artifactId>
         <version>${jaxb.version}</version>
         <scope>test</scope>
      </dependency>
   </dependencies>

   <!-- ********************************************** -->
   <!-- ******************* BUILD ******************** -->
   <!-- ********************************************** -->

   <build>
      <defaultGoal>clean package</defaultGoal>
      <testResources>
         <testResource>
            <directory>src/test/resources/</directory>
         </testResource>
         <testResource>
            <!-- Test resources -->
            <directory>src/test/resources/</directory>
            <includes>
               <!-- Filter the contexts -->
               <include>context/**/*.xml</include>
               <!-- Filter the properties -->
               <include>config/**/*.properties</include>
            </includes>
            <filtering>true</filtering>
         </testResource>
      </testResources>
      <plugins>
         <plugin>
            <!-- Changes -->
            <!-- Takes care of the changes log -->
            <!-- It is set to also validate the changes log file -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-changes-plugin</artifactId>
            <executions>
               <!-- Changes plugin is bound to the pre-site phase -->
               <execution>
                  <id>check-changes</id>
                  <phase>pre-site</phase>
                  <goals>
                     <goal>changes-check</goal>
                  </goals>
               </execution>
               <execution>
                  <id>validate-changes</id>
                  <phase>pre-site</phase>
                  <goals>
                     <goal>changes-validate</goal>
                  </goals>
                  <configuration>
                     <failOnError>true</failOnError>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <!-- Site -->
            <!-- Generates the Maven Site -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-site-plugin</artifactId>
            <dependencies>
               <dependency>
                  <!-- Docs Maven Skin -->
                  <groupId>com.bernardomg.maven.skins</groupId>
                  <artifactId>docs-maven-skin</artifactId>
                  <version>${site.skin.version}</version>
               </dependency>
            </dependencies>
         </plugin>
         <plugin>
            <!-- Resources -->
            <!-- Handles the project resources. -->
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-resources-plugin</artifactId>
            <configuration>
               <!-- Variables to to override will be delimited with a @. -->
               <!-- This avoids collisions with Spring variables. -->
               <!-- So instead of replacing ${project.name} Maven will replace @project.name@. -->
               <useDefaultDelimiters>false</useDefaultDelimiters>
               <delimiters>
                  <delimiter>@</delimiter>
               </delimiters>
            </configuration>
         </plugin>
         <plugin>
            <!-- Querydsl -->
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-maven-plugin</artifactId>
            <executions>
               <execution>
                  <id>generate-metamodel</id>
                  <goals>
                     <goal>export</goal>
                  </goals>
               </execution>
            </executions>
            <configuration>
               <skip>${codegen.skip}</skip>
               <jdbcDriver>com.mysql.cj.jdbc.Driver</jdbcDriver>
               <jdbcUrl>${codegen.url}</jdbcUrl>
               <packageName>es.enviraiot.dahs.domain.metamodel.v3</packageName>
               <targetFolder>${project.build.directory}/generated-sources/metamodel</targetFolder>
            </configuration>
            <dependencies>
               <dependency>
                  <groupId>mysql</groupId>
                  <artifactId>mysql-connector-java</artifactId>
                  <version>${mysql.version}</version>
               </dependency>
            </dependencies>
         </plugin>
         <plugin>
            <!-- Build helper -->
            <!-- Adds the generated files to the Maven classpath -->
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
               <execution>
                  <id>add-metamodel</id>
                  <goals>
                     <goal>add-source</goal>
                  </goals>
                  <configuration>
                     <sources>
                        <!-- Meta-model -->
                        <source>${project.build.directory}/generated-sources/metamodel</source>
                     </sources>
                  </configuration>
               </execution>
            </executions>
         </plugin>
      </plugins>
   </build>

</project>
